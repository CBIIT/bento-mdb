name: Build STS Image
permissions: 
  contents: write
  id-token: write
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Which account the ECR repository is in'
        type: choice
        default: fnl-leidos
        options:
          - fnl-leidos
          - ECR-cbiit-cloudone
      trivy_scan:
        type: boolean
        description: "Run Trivy Test Scan"
        required: true 
        default: false
jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
        ECR_REPOSITORY: crdc-mdb-sts
        # SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        
    steps:

    - name: Check out code
      uses: actions/checkout@v4
      with:
#       ref: ${{ env.CODE_BRANCH }}
#       ref: ${{ github.ref_name }}
        submodules: true

    - name: Extract branch name and set tag image
      id: extract_branch
      run: |
        BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
        echo "branch=$BRANCH_NAME" >> "$GITHUB_ENV"
        echo "Current branch is: $BRANCH_NAME"
        git fetch --tags --force --quiet
        tag=$(git tag -l $BRANCH_NAME* | sort -V | tail -1)
        if  [ ! -z "$tag" ];
        then
          # Increment the build number if a tag is found
          build_num=$(echo "${tag##*.}")
          build_num=$((build_num+1))
          echo "IMAGE_TAG=$BRANCH_NAME.$build_num" >> $GITHUB_ENV
        else
          # If no tag is found create a new tag name
          build_num=1
          echo "IMAGE_TAG=$BRANCH_NAME.$build_num" >> $GITHUB_ENV
        fi    
    - name: Build STS image
      id: build-image
      env:
        REGISTRY_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        STS_IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY}}:${{ env.IMAGE_TAG }}
      run: |
        cd devops/dockerfiles/sts/ && docker build -t $STS_IMAGE_NAME .
        
    - name: Run Trivy vulnerability scanner
      id: trivy-scan
      if: github.event.inputs.trivy_scan == 'true'
      env:
        REGISTRY_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        STS_IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY}}:${{ env.IMAGE_TAG }}
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.STS_IMAGE_NAME }}'
        format: 'table'
        exit-code: 1
        severity: 'CRITICAL,HIGH'

    - name: Create git tag for image
      run: |
        git config user.name "GitHub Actions"
        git config user.email "github-actions@users.noreply.github.com"
        git tag ${{ env.IMAGE_TAG }}
        git push origin ${{ env.IMAGE_TAG }}

    - name: Configure AWS Role to assume using OIDC authentication
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    - name: Login to Amazon ECR
      id: login-ecr
      env:
        REGISTRY_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      run:  |
        aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $REGISTRY_URL

    - name: Push docker Image
      if: success()
      env:
        REGISTRY_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com
        STS_IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY}}:${{ env.IMAGE_TAG }}
      run: |
        echo "Pushing: $STS_IMAGE_NAME"
        docker push $STS_IMAGE_NAME
